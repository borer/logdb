package org.logdb.bbtree;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.logdb.bit.BinaryHelper;
import org.logdb.bit.ByteArrayComparator;
import org.logdb.root.index.RootIndex;
import org.logdb.storage.Storage;
import org.logdb.storage.StorageUnits;
import org.logdb.storage.memory.MemoryStorage;
import org.logdb.support.StubTimeSource;
import org.logdb.support.TestUtils;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
import static org.logdb.support.TestUtils.INITIAL_VERSION;
import static org.logdb.support.TestUtils.MEMORY_CHUNK_SIZE;
import static org.logdb.support.TestUtils.createInitialRootReference;
import static org.logdb.support.TestUtils.createRootIndex;

class BTreeImplTest
{
    private static final int PAGE_SIZE = 256;
    private static final int MAX_LOG_SIZE = 0;

    private BTreeImpl bTree;

    @BeforeEach
    void setUp()
    {
        final Storage storage = new MemoryStorage(TestUtils.BYTE_ORDER, PAGE_SIZE, MEMORY_CHUNK_SIZE);
        final RootIndex rootIndex = createRootIndex(PAGE_SIZE);

        final NodesManager nodesManager = new NodesManager(storage, rootIndex, true, MAX_LOG_SIZE);

        bTree = new BTreeImpl(
                nodesManager,
                new StubTimeSource(),
                INITIAL_VERSION,
                StorageUnits.INVALID_PAGE_NUMBER,
                createInitialRootReference(nodesManager));
    }

    @Test
    void shouldBeAbleToGetElementsFromPast()
    {
        final byte[] key = BinaryHelper.longToBytes(5L);
        final byte[] expectedValue1 = BinaryHelper.longToBytes(1L);
        final byte[] expectedValue2 = BinaryHelper.longToBytes(2L);
        final byte[] expectedValue3 = BinaryHelper.longToBytes(3L);

        bTree.put(key, expectedValue1);
        bTree.put(key, expectedValue2);
        bTree.put(key, expectedValue3);

        //index for history is 0 based
        assertArrayEquals(expectedValue1, bTree.get(key, 0));
        assertArrayEquals(expectedValue2, bTree.get(key, 1));
        assertArrayEquals(expectedValue3, bTree.get(key, 2));

        try
        {
            bTree.get(key, 3);
            fail();
        }
        catch (final VersionNotFoundException e)
        {
            assertEquals("The version 3 was not found.", e.getMessage());
        }

        //get latest version by default
        final byte[] actualLatest = bTree.get(key);
        assertArrayEquals(expectedValue3, actualLatest);
    }

    @Test
    void shouldRetrieveAllTheElements()
    {
        final int maxElements = 600;
        for (long i = 0; i < maxElements; i++)
        {
            final byte[] bytes = BinaryHelper.longToBytes(i);
            bTree.put(bytes, bytes);
        }

        for (long i = 0; i < maxElements; i++)
        {
            final byte[] bytes = BinaryHelper.longToBytes(i);
            assertArrayEquals(bytes, bTree.get(bytes));
        }
    }

    @Test
    void shouldConsumeKeyValuesInOrder()
    {
        final List<byte[]> expectedOrder = new ArrayList<>();
        for (long i = 0; i < 500; i++)
        {
            final byte[] bytes = BinaryHelper.longToBytes(i);
            expectedOrder.add(bytes);
            bTree.put(bytes, bytes);
        }

        expectedOrder.sort(ByteArrayComparator.INSTANCE);

        final LinkedList<byte[]> actualOrder = new LinkedList<>();
        bTree.consumeAll((key, value) -> actualOrder.addLast(key));

        assertEquals(expectedOrder.size(), actualOrder.size());

        for (int i = 0; i < expectedOrder.size(); i++)
        {
            assertArrayEquals(expectedOrder.get(i), actualOrder.get(i));
        }
    }

    @Test
    void shouldConsumeKeyValuesInOrderForAGivenVersion()
    {
        final List<byte[]> expectedOrder = new ArrayList<>();
        final int version = 400;
        for (long i = 0; i < 500; i++)
        {
            final byte[] bytes = BinaryHelper.longToBytes(i);
            if (i <= version)
            {
                expectedOrder.add(bytes);
            }

            bTree.put(bytes, bytes);
        }

        expectedOrder.sort(ByteArrayComparator.INSTANCE);

        final LinkedList<byte[]> actualOrder = new LinkedList<>();
        bTree.consumeAll(version, (key, value) -> actualOrder.addLast(key));

        assertEquals(expectedOrder.size(), actualOrder.size());

        for (int i = 0; i < expectedOrder.size(); i++)
        {
            assertArrayEquals(expectedOrder.get(i), actualOrder.get(i));
        }
    }

    @Test
    void shouldBeABleToRemoveKeysFromTree()
    {
        final int size = 600;
        for (int i = 0; i < size; i++)
        {
            final byte[] bytes = BinaryHelper.longToBytes(i);
            bTree.put(bytes, bytes);
        }

        for (int i = 0; i < size; i++)
        {
            final byte[] bytes = BinaryHelper.longToBytes(i);
            bTree.remove(bytes);
        }

        assertEquals(1L, bTree.getNodesCount());
    }

    @Test
    void shouldBeAbleToInsertElements()
    {
        for (int i = 0; i < 600; i++)
        {
            final byte[] bytes = BinaryHelper.longToBytes(i);
            bTree.put(bytes, bytes);
        }

        final String expectedTree = "digraph g {\n" +
                "node [shape = record,height=.1];\n" +
                "\"2284\"[label = \" <2219> |305|  <2283> |100|  <lastChild> |Ls \"];\n" +
                "\"2284\":2219 -> \"2219\"\n" +
                "\"2284\":2283 -> \"2283\"\n" +
                "\"2284\":lastChild -> \"1904\"\n" +
                "\"2219\"[label = \" <1959> |265|  <1989> |20|  <2045> |285|  <2075> |40|  <lastChild> |Ls \"];\n" +
                "\"2219\":1959 -> \"1959\"\n" +
                "\"2219\":1989 -> \"1989\"\n" +
                "\"2219\":2045 -> \"2045\"\n" +
                "\"2219\":2075 -> \"2075\"\n" +
                "\"2219\":lastChild -> \"2131\"\n" +
                "\"1959\"[label = \" <1906> |257|  <1919> |4|  <1923> |261|  <1936> |8|  <lastChild> |Ls \"];\n" +
                "\"1959\":1906 -> \"1906\"\n" +
                "\"1959\":1919 -> \"1919\"\n" +
                "\"1959\":1923 -> \"1923\"\n" +
                "\"1959\":1936 -> \"1936\"\n" +
                "\"1959\":lastChild -> \"1940\"\n" +
                "\"1906\"[label = \" <0> |0|  <256> |256|  <512> |512|  <1> |1| \"];\n" +
                "\"1919\"[label = \" <257> |257|  <513> |513|  <2> |2|  <258> |258|  <514> |514|  <3> |3|  <259> |259|  <515> |515| \"];\n" +
                "\"1923\"[label = \" <4> |4|  <260> |260|  <516> |516|  <5> |5| \"];\n" +
                "\"1936\"[label = \" <261> |261|  <517> |517|  <6> |6|  <262> |262|  <518> |518|  <7> |7|  <263> |263|  <519> |519| \"];\n" +
                "\"1940\"[label = \" <8> |8|  <264> |264|  <520> |520|  <9> |9| \"];\n" +
                "\"1989\"[label = \" <1953> |12|  <1957> |269|  <1971> |16|  <1975> |273|  <lastChild> |Ls \"];\n" +
                "\"1989\":1953 -> \"1953\"\n" +
                "\"1989\":1957 -> \"1957\"\n" +
                "\"1989\":1971 -> \"1971\"\n" +
                "\"1989\":1975 -> \"1975\"\n" +
                "\"1989\":lastChild -> \"1988\"\n" +
                "\"1953\"[label = \" <265> |265|  <521> |521|  <10> |10|  <266> |266|  <522> |522|  <11> |11|  <267> |267|  <523> |523| \"];\n" +
                "\"1957\"[label = \" <12> |12|  <268> |268|  <524> |524|  <13> |13| \"];\n" +
                "\"1971\"[label = \" <269> |269|  <525> |525|  <14> |14|  <270> |270|  <526> |526|  <15> |15|  <271> |271|  <527> |527| \"];\n" +
                "\"1975\"[label = \" <16> |16|  <272> |272|  <528> |528|  <17> |17| \"];\n" +
                "\"1988\"[label = \" <273> |273|  <529> |529|  <18> |18|  <274> |274|  <530> |530|  <19> |19|  <275> |275|  <531> |531| \"];\n" +
                "\"2045\"[label = \" <1992> |277|  <2005> |24|  <2009> |281|  <2022> |28|  <lastChild> |Ls \"];\n" +
                "\"2045\":1992 -> \"1992\"\n" +
                "\"2045\":2005 -> \"2005\"\n" +
                "\"2045\":2009 -> \"2009\"\n" +
                "\"2045\":2022 -> \"2022\"\n" +
                "\"2045\":lastChild -> \"2026\"\n" +
                "\"1992\"[label = \" <20> |20|  <276> |276|  <532> |532|  <21> |21| \"];\n" +
                "\"2005\"[label = \" <277> |277|  <533> |533|  <22> |22|  <278> |278|  <534> |534|  <23> |23|  <279> |279|  <535> |535| \"];\n" +
                "\"2009\"[label = \" <24> |24|  <280> |280|  <536> |536|  <25> |25| \"];\n" +
                "\"2022\"[label = \" <281> |281|  <537> |537|  <26> |26|  <282> |282|  <538> |538|  <27> |27|  <283> |283|  <539> |539| \"];\n" +
                "\"2026\"[label = \" <28> |28|  <284> |284|  <540> |540|  <29> |29| \"];\n" +
                "\"2075\"[label = \" <2039> |32|  <2043> |289|  <2057> |36|  <2061> |293|  <lastChild> |Ls \"];\n" +
                "\"2075\":2039 -> \"2039\"\n" +
                "\"2075\":2043 -> \"2043\"\n" +
                "\"2075\":2057 -> \"2057\"\n" +
                "\"2075\":2061 -> \"2061\"\n" +
                "\"2075\":lastChild -> \"2074\"\n" +
                "\"2039\"[label = \" <285> |285|  <541> |541|  <30> |30|  <286> |286|  <542> |542|  <31> |31|  <287> |287|  <543> |543| \"];\n" +
                "\"2043\"[label = \" <32> |32|  <288> |288|  <544> |544|  <33> |33| \"];\n" +
                "\"2057\"[label = \" <289> |289|  <545> |545|  <34> |34|  <290> |290|  <546> |546|  <35> |35|  <291> |291|  <547> |547| \"];\n" +
                "\"2061\"[label = \" <36> |36|  <292> |292|  <548> |548|  <37> |37| \"];\n" +
                "\"2074\"[label = \" <293> |293|  <549> |549|  <38> |38|  <294> |294|  <550> |550|  <39> |39|  <295> |295|  <551> |551| \"];\n" +
                "\"2131\"[label = \" <2078> |297|  <2091> |44|  <2095> |301|  <2108> |48|  <lastChild> |Ls \"];\n" +
                "\"2131\":2078 -> \"2078\"\n" +
                "\"2131\":2091 -> \"2091\"\n" +
                "\"2131\":2095 -> \"2095\"\n" +
                "\"2131\":2108 -> \"2108\"\n" +
                "\"2131\":lastChild -> \"2112\"\n" +
                "\"2078\"[label = \" <40> |40|  <296> |296|  <552> |552|  <41> |41| \"];\n" +
                "\"2091\"[label = \" <297> |297|  <553> |553|  <42> |42|  <298> |298|  <554> |554|  <43> |43|  <299> |299|  <555> |555| \"];\n" +
                "\"2095\"[label = \" <44> |44|  <300> |300|  <556> |556|  <45> |45| \"];\n" +
                "\"2108\"[label = \" <301> |301|  <557> |557|  <46> |46|  <302> |302|  <558> |558|  <47> |47|  <303> |303|  <559> |559| \"];\n" +
                "\"2112\"[label = \" <48> |48|  <304> |304|  <560> |560|  <49> |49| \"];\n" +
                "\"2283\"[label = \" <2161> |60|  <2217> |325|  <2248> |80|  <lastChild> |Ls \"];\n" +
                "\"2283\":2161 -> \"2161\"\n" +
                "\"2283\":2217 -> \"2217\"\n" +
                "\"2283\":2248 -> \"2248\"\n" +
                "\"2283\":lastChild -> \"2282\"\n" +
                "\"2161\"[label = \" <2125> |52|  <2129> |309|  <2143> |56|  <2147> |313|  <lastChild> |Ls \"];\n" +
                "\"2161\":2125 -> \"2125\"\n" +
                "\"2161\":2129 -> \"2129\"\n" +
                "\"2161\":2143 -> \"2143\"\n" +
                "\"2161\":2147 -> \"2147\"\n" +
                "\"2161\":lastChild -> \"2160\"\n" +
                "\"2125\"[label = \" <305> |305|  <561> |561|  <50> |50|  <306> |306|  <562> |562|  <51> |51|  <307> |307|  <563> |563| \"];\n" +
                "\"2129\"[label = \" <52> |52|  <308> |308|  <564> |564|  <53> |53| \"];\n" +
                "\"2143\"[label = \" <309> |309|  <565> |565|  <54> |54|  <310> |310|  <566> |566|  <55> |55|  <311> |311|  <567> |567| \"];\n" +
                "\"2147\"[label = \" <56> |56|  <312> |312|  <568> |568|  <57> |57| \"];\n" +
                "\"2160\"[label = \" <313> |313|  <569> |569|  <58> |58|  <314> |314|  <570> |570|  <59> |59|  <315> |315|  <571> |571| \"];\n" +
                "\"2217\"[label = \" <2164> |317|  <2177> |64|  <2181> |321|  <2194> |68|  <lastChild> |Ls \"];\n" +
                "\"2217\":2164 -> \"2164\"\n" +
                "\"2217\":2177 -> \"2177\"\n" +
                "\"2217\":2181 -> \"2181\"\n" +
                "\"2217\":2194 -> \"2194\"\n" +
                "\"2217\":lastChild -> \"2198\"\n" +
                "\"2164\"[label = \" <60> |60|  <316> |316|  <572> |572|  <61> |61| \"];\n" +
                "\"2177\"[label = \" <317> |317|  <573> |573|  <62> |62|  <318> |318|  <574> |574|  <63> |63|  <319> |319|  <575> |575| \"];\n" +
                "\"2181\"[label = \" <64> |64|  <320> |320|  <576> |576|  <65> |65| \"];\n" +
                "\"2194\"[label = \" <321> |321|  <577> |577|  <66> |66|  <322> |322|  <578> |578|  <67> |67|  <323> |323|  <579> |579| \"];\n" +
                "\"2198\"[label = \" <68> |68|  <324> |324|  <580> |580|  <69> |69| \"];\n" +
                "\"2248\"[label = \" <2211> |72|  <2215> |329|  <2230> |76|  <2234> |333|  <lastChild> |Ls \"];\n" +
                "\"2248\":2211 -> \"2211\"\n" +
                "\"2248\":2215 -> \"2215\"\n" +
                "\"2248\":2230 -> \"2230\"\n" +
                "\"2248\":2234 -> \"2234\"\n" +
                "\"2248\":lastChild -> \"2247\"\n" +
                "\"2211\"[label = \" <325> |325|  <581> |581|  <70> |70|  <326> |326|  <582> |582|  <71> |71|  <327> |327|  <583> |583| \"];\n" +
                "\"2215\"[label = \" <72> |72|  <328> |328|  <584> |584|  <73> |73| \"];\n" +
                "\"2230\"[label = \" <329> |329|  <585> |585|  <74> |74|  <330> |330|  <586> |586|  <75> |75|  <331> |331|  <587> |587| \"];\n" +
                "\"2234\"[label = \" <76> |76|  <332> |332|  <588> |588|  <77> |77| \"];\n" +
                "\"2247\"[label = \" <333> |333|  <589> |589|  <78> |78|  <334> |334|  <590> |590|  <79> |79|  <335> |335|  <591> |591| \"];\n" +
                "\"2282\"[label = \" <2251> |337|  <2264> |84|  <2268> |341|  <2281> |88|  <1243> |92|  <1259> |96|  <lastChild> |Ls \"];\n" +
                "\"2282\":2251 -> \"2251\"\n" +
                "\"2282\":2264 -> \"2264\"\n" +
                "\"2282\":2268 -> \"2268\"\n" +
                "\"2282\":2281 -> \"2281\"\n" +
                "\"2282\":1243 -> \"1243\"\n" +
                "\"2282\":1259 -> \"1259\"\n" +
                "\"2282\":lastChild -> \"1275\"\n" +
                "\"2251\"[label = \" <80> |80|  <336> |336|  <592> |592|  <81> |81| \"];\n" +
                "\"2264\"[label = \" <337> |337|  <593> |593|  <82> |82|  <338> |338|  <594> |594|  <83> |83|  <339> |339|  <595> |595| \"];\n" +
                "\"2268\"[label = \" <84> |84|  <340> |340|  <596> |596|  <85> |85| \"];\n" +
                "\"2281\"[label = \" <341> |341|  <597> |597|  <86> |86|  <342> |342|  <598> |598|  <87> |87|  <343> |343|  <599> |599| \"];\n" +
                "\"1243\"[label = \" <88> |88|  <344> |344|  <89> |89|  <345> |345|  <90> |90|  <346> |346|  <91> |91|  <347> |347| \"];\n" +
                "\"1259\"[label = \" <92> |92|  <348> |348|  <93> |93|  <349> |349|  <94> |94|  <350> |350|  <95> |95|  <351> |351| \"];\n" +
                "\"1275\"[label = \" <96> |96|  <352> |352|  <97> |97|  <353> |353|  <98> |98|  <354> |354|  <99> |99|  <355> |355| \"];\n" +
                "\"1904\"[label = \" <1356> |120|  <1436> |140|  <1516> |160|  <1596> |180|  <1676> |200|  <1756> |220|  <1873> |240|  <lastChild> |Ls \"];\n" +
                "\"1904\":1356 -> \"1356\"\n" +
                "\"1904\":1436 -> \"1436\"\n" +
                "\"1904\":1516 -> \"1516\"\n" +
                "\"1904\":1596 -> \"1596\"\n" +
                "\"1904\":1676 -> \"1676\"\n" +
                "\"1904\":1756 -> \"1756\"\n" +
                "\"1904\":1873 -> \"1873\"\n" +
                "\"1904\":lastChild -> \"1903\"\n" +
                "\"1356\"[label = \" <1291> |104|  <1307> |108|  <1323> |112|  <1339> |116|  <lastChild> |Ls \"];\n" +
                "\"1356\":1291 -> \"1291\"\n" +
                "\"1356\":1307 -> \"1307\"\n" +
                "\"1356\":1323 -> \"1323\"\n" +
                "\"1356\":1339 -> \"1339\"\n" +
                "\"1356\":lastChild -> \"1355\"\n" +
                "\"1291\"[label = \" <100> |100|  <356> |356|  <101> |101|  <357> |357|  <102> |102|  <358> |358|  <103> |103|  <359> |359| \"];\n" +
                "\"1307\"[label = \" <104> |104|  <360> |360|  <105> |105|  <361> |361|  <106> |106|  <362> |362|  <107> |107|  <363> |363| \"];\n" +
                "\"1323\"[label = \" <108> |108|  <364> |364|  <109> |109|  <365> |365|  <110> |110|  <366> |366|  <111> |111|  <367> |367| \"];\n" +
                "\"1339\"[label = \" <112> |112|  <368> |368|  <113> |113|  <369> |369|  <114> |114|  <370> |370|  <115> |115|  <371> |371| \"];\n" +
                "\"1355\"[label = \" <116> |116|  <372> |372|  <117> |117|  <373> |373|  <118> |118|  <374> |374|  <119> |119|  <375> |375| \"];\n" +
                "\"1436\"[label = \" <1371> |124|  <1387> |128|  <1403> |132|  <1419> |136|  <lastChild> |Ls \"];\n" +
                "\"1436\":1371 -> \"1371\"\n" +
                "\"1436\":1387 -> \"1387\"\n" +
                "\"1436\":1403 -> \"1403\"\n" +
                "\"1436\":1419 -> \"1419\"\n" +
                "\"1436\":lastChild -> \"1435\"\n" +
                "\"1371\"[label = \" <120> |120|  <376> |376|  <121> |121|  <377> |377|  <122> |122|  <378> |378|  <123> |123|  <379> |379| \"];\n" +
                "\"1387\"[label = \" <124> |124|  <380> |380|  <125> |125|  <381> |381|  <126> |126|  <382> |382|  <127> |127|  <383> |383| \"];\n" +
                "\"1403\"[label = \" <128> |128|  <384> |384|  <129> |129|  <385> |385|  <130> |130|  <386> |386|  <131> |131|  <387> |387| \"];\n" +
                "\"1419\"[label = \" <132> |132|  <388> |388|  <133> |133|  <389> |389|  <134> |134|  <390> |390|  <135> |135|  <391> |391| \"];\n" +
                "\"1435\"[label = \" <136> |136|  <392> |392|  <137> |137|  <393> |393|  <138> |138|  <394> |394|  <139> |139|  <395> |395| \"];\n" +
                "\"1516\"[label = \" <1451> |144|  <1467> |148|  <1483> |152|  <1499> |156|  <lastChild> |Ls \"];\n" +
                "\"1516\":1451 -> \"1451\"\n" +
                "\"1516\":1467 -> \"1467\"\n" +
                "\"1516\":1483 -> \"1483\"\n" +
                "\"1516\":1499 -> \"1499\"\n" +
                "\"1516\":lastChild -> \"1515\"\n" +
                "\"1451\"[label = \" <140> |140|  <396> |396|  <141> |141|  <397> |397|  <142> |142|  <398> |398|  <143> |143|  <399> |399| \"];\n" +
                "\"1467\"[label = \" <144> |144|  <400> |400|  <145> |145|  <401> |401|  <146> |146|  <402> |402|  <147> |147|  <403> |403| \"];\n" +
                "\"1483\"[label = \" <148> |148|  <404> |404|  <149> |149|  <405> |405|  <150> |150|  <406> |406|  <151> |151|  <407> |407| \"];\n" +
                "\"1499\"[label = \" <152> |152|  <408> |408|  <153> |153|  <409> |409|  <154> |154|  <410> |410|  <155> |155|  <411> |411| \"];\n" +
                "\"1515\"[label = \" <156> |156|  <412> |412|  <157> |157|  <413> |413|  <158> |158|  <414> |414|  <159> |159|  <415> |415| \"];\n" +
                "\"1596\"[label = \" <1531> |164|  <1547> |168|  <1563> |172|  <1579> |176|  <lastChild> |Ls \"];\n" +
                "\"1596\":1531 -> \"1531\"\n" +
                "\"1596\":1547 -> \"1547\"\n" +
                "\"1596\":1563 -> \"1563\"\n" +
                "\"1596\":1579 -> \"1579\"\n" +
                "\"1596\":lastChild -> \"1595\"\n" +
                "\"1531\"[label = \" <160> |160|  <416> |416|  <161> |161|  <417> |417|  <162> |162|  <418> |418|  <163> |163|  <419> |419| \"];\n" +
                "\"1547\"[label = \" <164> |164|  <420> |420|  <165> |165|  <421> |421|  <166> |166|  <422> |422|  <167> |167|  <423> |423| \"];\n" +
                "\"1563\"[label = \" <168> |168|  <424> |424|  <169> |169|  <425> |425|  <170> |170|  <426> |426|  <171> |171|  <427> |427| \"];\n" +
                "\"1579\"[label = \" <172> |172|  <428> |428|  <173> |173|  <429> |429|  <174> |174|  <430> |430|  <175> |175|  <431> |431| \"];\n" +
                "\"1595\"[label = \" <176> |176|  <432> |432|  <177> |177|  <433> |433|  <178> |178|  <434> |434|  <179> |179|  <435> |435| \"];\n" +
                "\"1676\"[label = \" <1611> |184|  <1627> |188|  <1643> |192|  <1659> |196|  <lastChild> |Ls \"];\n" +
                "\"1676\":1611 -> \"1611\"\n" +
                "\"1676\":1627 -> \"1627\"\n" +
                "\"1676\":1643 -> \"1643\"\n" +
                "\"1676\":1659 -> \"1659\"\n" +
                "\"1676\":lastChild -> \"1675\"\n" +
                "\"1611\"[label = \" <180> |180|  <436> |436|  <181> |181|  <437> |437|  <182> |182|  <438> |438|  <183> |183|  <439> |439| \"];\n" +
                "\"1627\"[label = \" <184> |184|  <440> |440|  <185> |185|  <441> |441|  <186> |186|  <442> |442|  <187> |187|  <443> |443| \"];\n" +
                "\"1643\"[label = \" <188> |188|  <444> |444|  <189> |189|  <445> |445|  <190> |190|  <446> |446|  <191> |191|  <447> |447| \"];\n" +
                "\"1659\"[label = \" <192> |192|  <448> |448|  <193> |193|  <449> |449|  <194> |194|  <450> |450|  <195> |195|  <451> |451| \"];\n" +
                "\"1675\"[label = \" <196> |196|  <452> |452|  <197> |197|  <453> |453|  <198> |198|  <454> |454|  <199> |199|  <455> |455| \"];\n" +
                "\"1756\"[label = \" <1691> |204|  <1707> |208|  <1723> |212|  <1739> |216|  <lastChild> |Ls \"];\n" +
                "\"1756\":1691 -> \"1691\"\n" +
                "\"1756\":1707 -> \"1707\"\n" +
                "\"1756\":1723 -> \"1723\"\n" +
                "\"1756\":1739 -> \"1739\"\n" +
                "\"1756\":lastChild -> \"1755\"\n" +
                "\"1691\"[label = \" <200> |200|  <456> |456|  <201> |201|  <457> |457|  <202> |202|  <458> |458|  <203> |203|  <459> |459| \"];\n" +
                "\"1707\"[label = \" <204> |204|  <460> |460|  <205> |205|  <461> |461|  <206> |206|  <462> |462|  <207> |207|  <463> |463| \"];\n" +
                "\"1723\"[label = \" <208> |208|  <464> |464|  <209> |209|  <465> |465|  <210> |210|  <466> |466|  <211> |211|  <467> |467| \"];\n" +
                "\"1739\"[label = \" <212> |212|  <468> |468|  <213> |213|  <469> |469|  <214> |214|  <470> |470|  <215> |215|  <471> |471| \"];\n" +
                "\"1755\"[label = \" <216> |216|  <472> |472|  <217> |217|  <473> |473|  <218> |218|  <474> |474|  <219> |219|  <475> |475| \"];\n" +
                "\"1873\"[label = \" <1771> |224|  <1787> |228|  <1803> |232|  <1819> |236|  <lastChild> |Ls \"];\n" +
                "\"1873\":1771 -> \"1771\"\n" +
                "\"1873\":1787 -> \"1787\"\n" +
                "\"1873\":1803 -> \"1803\"\n" +
                "\"1873\":1819 -> \"1819\"\n" +
                "\"1873\":lastChild -> \"1835\"\n" +
                "\"1771\"[label = \" <220> |220|  <476> |476|  <221> |221|  <477> |477|  <222> |222|  <478> |478|  <223> |223|  <479> |479| \"];\n" +
                "\"1787\"[label = \" <224> |224|  <480> |480|  <225> |225|  <481> |481|  <226> |226|  <482> |482|  <227> |227|  <483> |483| \"];\n" +
                "\"1803\"[label = \" <228> |228|  <484> |484|  <229> |229|  <485> |485|  <230> |230|  <486> |486|  <231> |231|  <487> |487| \"];\n" +
                "\"1819\"[label = \" <232> |232|  <488> |488|  <233> |233|  <489> |489|  <234> |234|  <490> |490|  <235> |235|  <491> |491| \"];\n" +
                "\"1835\"[label = \" <236> |236|  <492> |492|  <237> |237|  <493> |493|  <238> |238|  <494> |494|  <239> |239|  <495> |495| \"];\n" +
                "\"1903\"[label = \" <1851> |244|  <1867> |248|  <1881> |251|  <1897> |253|  <lastChild> |Ls \"];\n" +
                "\"1903\":1851 -> \"1851\"\n" +
                "\"1903\":1867 -> \"1867\"\n" +
                "\"1903\":1881 -> \"1881\"\n" +
                "\"1903\":1897 -> \"1897\"\n" +
                "\"1903\":lastChild -> \"1902\"\n" +
                "\"1851\"[label = \" <240> |240|  <496> |496|  <241> |241|  <497> |497|  <242> |242|  <498> |498|  <243> |243|  <499> |499| \"];\n" +
                "\"1867\"[label = \" <244> |244|  <500> |500|  <245> |245|  <501> |501|  <246> |246|  <502> |502|  <247> |247|  <503> |503| \"];\n" +
                "\"1881\"[label = \" <248> |248|  <504> |504|  <249> |249|  <505> |505|  <250> |250|  <506> |506| \"];\n" +
                "\"1897\"[label = \" <251> |251|  <507> |507|  <252> |252|  <508> |508| \"];\n" +
                "\"1902\"[label = \" <253> |253|  <509> |509|  <254> |254|  <510> |510|  <255> |255|  <511> |511| \"];\n" +
                "}\n";

        assertEquals(expectedTree, bTree.print());
    }
}